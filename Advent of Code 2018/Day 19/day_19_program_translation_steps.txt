# === Translation of the program of day 19 ===
#
# Modifying the ip register controls execution flow, e.g.:
#   * addr, addi are relative jumps
#   * mulr, muli are relative jumps
#   * setr, seti are absolute jumps
# After the ip register changed it is automatically incremented by 1


# --- Step 1: Translation to Python
# ip 4                  v
# registers = [1, 0, 0, 0, 0, 0]
# registers[4] = registers[4] + 16                        #  0 addi 4 16 4 --> 17
# registers[3] = 1                                        #  1 seti 1  9 3
# registers[2] = 1                                        #  2 seti 1  6 2
# registers[5] = registers[3] * registers[2]              #  3 mulr 3  2 5
# registers[5] = 1 if registers[5] == registers[1] else 0 #  4 eqrr 5  1 5
# registers[4] = registers[5] + registers[4]              #  5 addr 5  4 4
# registers[4] = registers[4] + 1                         #  6 addi 4  1 4
# registers[0] = registers[3] + registers[0]              #  7 addr 3  0 0
# registers[2] = registers[2] + 1                         #  8 addi 2  1 2
# registers[5] = 1 if registers[2] > registers[1] else 0  #  9 gtrr 2  1 5
# registers[4] = registers[4] + registers[5]              # 10 addr 4  5 4
# registers[4] = 2                                        # 11 seti 2  9 4 --> 3
# registers[3] = registers[3] + 1                         # 12 addi 3  1 3
# registers[5] = 1 if registers[3] > registers[1] else 0  # 13 gtrr 3  1 5
# registers[4] = registers[5] + registers[4]              # 14 addr 5  4 4
# registers[4] = 1                                        # 15 seti 1  0 4 --> 2
# registers[4] = registers[4] * registers[4]              # 16 mulr 4  4 4
# registers[1] = registers[1] + 2                         # 17 addi 1  2 1
# registers[1] = registers[1] * registers[1]              # 18 mulr 1  1 1
# registers[1] = registers[4] * registers[1]              # 19 mulr 4  1 1
# registers[1] = registers[1] * 11                        # 20 muli 1 11 1
# registers[5] = registers[5] + 1                         # 21 addi 5  1 5
# registers[5] = registers[5] * registers[4]              # 22 mulr 5  4 5
# registers[5] = registers[5] + 2                         # 23 addi 5  2 5
# registers[1] = registers[1] + registers[5]              # 24 addr 1  5 1
# registers[4] = registers[4] + registers[0]              # 25 addr 4  0 4
# registers[4] = 0                                        # 26 seti 0  1 4
# registers[5] = registers[4]                             # 27 setr 4  3 5
# registers[5] = registers[5] * registers[4]              # 28 mulr 5  4 5
# registers[5] = registers[4] + registers[5]              # 29 addr 4  5 5
# registers[5] = registers[4] * registers[5]              # 30 mulr 4  5 5
# registers[5] = registers[5] * 14                        # 31 muli 5 14 5
# registers[5] = registers[5] * registers[4]              # 32 mulr 5  4 5
# registers[1] = registers[1] + registers[5]              # 33 addr 1  5 1
# registers[0] = 0                                        # 34 seti 0  6 0
# registers[4] = 0                                        # 35 seti 0  7 4 -> 1


# --- Step 2: Shorten expressions, replace registers[4] with line numbers
# registers = [1, 0, 0, 0, 0, 0]
# registers[4] = 16                                       #  0 addi 4 16 4 --> 17
# registers[3] = 1                                        #  1 seti 1  9 3
# registers[2] = 1                                        #  2 seti 1  6 2
# registers[5] = registers[3] * registers[2]              #  3 mulr 3  2 5
# registers[5] = 1 if registers[5] == registers[1] else 0 #  4 eqrr 5  1 5
# registers[4] = 5 + registers[5]                         #  5 addr 5  4 4
# registers[4] = 7                                        #  6 addi 4  1 4 -> 8
# registers[0] += registers[3]                            #  7 addr 3  0 0
# registers[2] += 1                                       #  8 addi 2  1 2
# registers[5] = 1 if registers[2] > registers[1] else 0  #  9 gtrr 2  1 5
# registers[4] = 10 + registers[5]                        # 10 addr 4  5 4
# registers[4] = 2                                        # 11 seti 2  9 4 --> 3
# registers[3] += 1                                       # 12 addi 3  1 3
# registers[5] = 1 if registers[3] > registers[1] else 0  # 13 gtrr 3  1 5
# registers[4] = 14 + registers[5]                        # 14 addr 5  4 4
# registers[4] = 1                                        # 15 seti 1  0 4 --> 2
# registers[4] = 16**2                                    # 16 mulr 4  4 4 ->End
# registers[1] += 2                                       # 17 addi 1  2 1
# registers[1] = registers[1]**2                          # 18 mulr 1  1 1
# registers[1] *= 19                                      # 19 mulr 4  1 1
# registers[1] *= 11                                      # 20 muli 1 11 1
# registers[5] += 1                                       # 21 addi 5  1 5
# registers[5] *= 22                                      # 22 mulr 5  4 5
# registers[5] += 2                                       # 23 addi 5  2 5
# registers[1] += registers[5]                            # 24 addr 1  5 1
# registers[4] = 25 + registers[0]                        # 25 addr 4  0 4
# registers[4] = 0                                        # 26 seti 0  1 4 -> 1
# registers[5] = 27                                       # 27 setr 4  3 5
# registers[5] *= 28                                      # 28 mulr 5  4 5
# registers[5] += 29                                      # 29 addr 4  5 5
# registers[5] *= 30                                      # 30 mulr 4  5 5
# registers[5] *= 14                                      # 31 muli 5 14 5
# registers[5] *= 32                                      # 32 mulr 5  4 5
# registers[1] += registers[5]                            # 33 addr 1  5 1
# registers[0] = 0                                        # 34 seti 0  6 0
# registers[4] = 0                                        # 35 seti 0  7 4 -> 1


# --- Step 3: Combine statements, expand jumps
# registers = [1, 0, 0, 0, 0, 0]
# registers[4] = 16                                       #  0 addi 4 16 4 --> 17
# # Main loop
# registers[3] = 1                                        #  1 seti 1  9 3
# registers[2] = 1                                        #  2 seti 1  6 2
# registers[5] = registers[3] * registers[2]              #  3 mulr 3  2 5
# # If registers[5] == registers[1]
# #   go to 7
# # else
# #   go to 8
# registers[5] = 1 if registers[5] == registers[1] else 0 #  4 eqrr 5  1 5
# registers[4] = 5 + registers[5]                         #  5 addr 5  4 4 -> 7
# registers[4] = 7                                        #  6 addi 4  1 4 -> 8
# registers[0] += registers[3]                            #  7 addr 3  0 0
# registers[2] += 1                                       #  8 addi 2  1 2
# # If registers[2] > registers[1]
# #   go to 12
# # else
# #   go to 3
# registers[5] = 1 if registers[2] > registers[1] else 0  #  9 gtrr 2  1 5
# registers[4] = 10 + registers[5]                        # 10 addr 4  5 4 -> 12
# registers[4] = 2                                        # 11 seti 2  9 4 --> 3
# registers[3] += 1                                       # 12 addi 3  1 3
# # If registers[3] > registers[1]
# #   halt loop
# # else
# #   go to 2
# registers[5] = 1 if registers[3] > registers[1] else 0  # 13 gtrr 3  1 5
# registers[4] = 14 + registers[5]                        # 14 addr 5  4 4
# registers[4] = 1                                        # 15 seti 1  0 4 --> 2
# registers[4] = 16**2                                    # 16 mulr 4  4 4 ->End
# # Initial set-up
# registers[1] = (registers[1] + 2)**2 * 19 * 11          # 17 to 20
# registers[5] = (registers[5] + 1) * 22 + 2              # 21 to 23
# registers[1] += registers[5]                            # 24 addr 1  5 1
# # If registers[0] == 0
# #   go to 1
# # elif registers[0] == 1
# #   go to 27
# # elif registers[0] == 2
# #   go to 28
# # elif registers[0] == 3
# #   go to 29
# # elif registers[0] == 4
# #   go to 30
# # elif registers[0] == 5
# #   go to 31
# # elif registers[0] == 6
# #   go to 32
# # elif registers[0] == 7
# #   go to 33
# # elif registers[0] == 8
# #   go to 34
# # elif registers[0] == 9
# #   go to 35
# # elif registers[0] >= 10
# #   halt program
# registers[4] = 25 + registers[0]                        # 25 addr 4  0 4
# registers[4] = 0                                        # 26 seti 0  1 4 -> 1
# registers[5] = 27                                       # 27 setr 4  3 5
# registers[5] *= 28                                      # 28 mulr 5  4 5
# registers[5] += 29                                      # 29 addr 4  5 5
# registers[5] *= 30                                      # 30 mulr 4  5 5
# registers[5] *= 14                                      # 31 muli 5 14 5
# registers[5] *= 32                                      # 32 mulr 5  4 5
# registers[1] += registers[5]                            # 33 addr 1  5 1
# registers[0] = 0                                        # 34 seti 0  6 0
# registers[4] = 0                                        # 35 seti 0  7 4 -> 1


# --- Step 4: Clarify jumps and subroutines
# registers[3] = 1                                        #  1 seti 1  9 3
# registers[2] = 1                                        #  2 seti 1  6 2
# registers[5] = registers[3] * registers[2]              #  3 mulr 3  2 5

# # If registers[5] == registers[1]
# #   go to 7
# # else
# #   go to 8
# registers[5] = 1 if registers[5] == registers[1] else 0 #  4 eqrr 5  1 5
# registers[4] = 5 + registers[5]                         #  5 addr 5  4 4 -> 7
# registers[4] = 7                                        #  6 addi 4  1 4 -> 8
# registers[0] += registers[3]                            #  7 addr 3  0 0
# registers[2] += 1                                       #  8 addi 2  1 2

# # If registers[2] > registers[1]
# #   go to 12
# # else
# #   go to 3
# registers[5] = 1 if registers[2] > registers[1] else 0  #  9 gtrr 2  1 5
# registers[4] = 10 + registers[5]                        # 10 addr 4  5 4 -> 12
# registers[4] = 2                                        # 11 seti 2  9 4 --> 3
# registers[3] += 1                                       # 12 addi 3  1 3

# # If registers[3] > registers[1]
# #   halt loop
# # else
# #   go to 2
# registers[5] = 1 if registers[3] > registers[1] else 0  # 13 gtrr 3  1 5
# registers[4] = 14 + registers[5]                        # 14 addr 5  4 4
# registers[4] = 1                                        # 15 seti 1  0 4 --> 2
# registers[4] = 16**2                                    # 16 mulr 4  4 4 -->End
